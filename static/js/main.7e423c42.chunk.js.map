{"version":3,"sources":["App.module.css","Bll/Selectors/selectors.ts","API/api.ts","Bll/reducer.ts","App.tsx","reportWebVitals.ts","Bll/store.ts","index.tsx"],"names":["module","exports","dataSelector","state","reducer","data","Api","getData","axios","get","then","response","initialState","status","error","setStatusAC","type","App","dispatch","useDispatch","useSelector","useState","inputValue","setInputValue","editMode","setEditMode","lowerCase","setLowerCase","substring","setSubstring","useEffect","a","result","className","s","container","htmlFor","superInput","value","onChange","event","currentTarget","btn","onClick","filter","item","length","map","index","test","toLowerCase","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e423c42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2r9bb\",\"data\":\"App_data__1Ezec\",\"test\":\"App_test__8jEUq\",\"superInput\":\"App_superInput__2BQFj\",\"btn\":\"App_btn__1Kc6w\"};","import {AppRootStateType} from \"../store\";\r\n\r\nexport const dataSelector = (state:AppRootStateType)=>{\r\n    return state.reducer.data\r\n}","import axios from \"axios\";\r\n\r\n\r\nconst Api = {\r\n        getData(){\r\n          return   axios.get('https://www.mrsoft.by/data.json')\r\n                .then(response=>response.data.data)\r\n        }\r\n}\r\n\r\nexport default Api","import {Dispatch} from \"redux\";\r\nimport Api from \"../API/api\";\r\n\r\nexport const initialState:TypeInitialState = {\r\n    status:'free',\r\n    error:'',\r\n    data:[],\r\n}\r\nexport const getDataAC = (data:string[])=>{\r\n    return{\r\n        type:'/reducer/GET_DATA',\r\n        data\r\n    } as const\r\n}\r\n\r\nexport const setStatusAC = (status:TypeStatus)=>{\r\n    return{\r\n        type:'/reducer/SET_STATUS',\r\n        status\r\n    } as const\r\n}\r\nexport const setErrorAC = (error:string)=>{\r\n    return{\r\n        type:'/reducer/SET_ERROR',\r\n        error\r\n    } as const\r\n}\r\nexport const Reducer=(state:TypeInitialState=initialState,action:TypeActions):TypeInitialState=>{\r\n        switch (action.type) {\r\n            case '/reducer/GET_DATA':{\r\n                return {...state,\r\n                data:action.data\r\n                }\r\n            }\r\n            case '/reducer/SET_STATUS':{\r\n                return {...state,\r\n                    status:action.status\r\n                }\r\n            }\r\n            case '/reducer/SET_ERROR':{\r\n                return {...state,\r\n                    error:action.error\r\n                }\r\n            }\r\n            default:\r\n                return state\r\n        }\r\n}\r\n\r\n\r\n\r\n\r\nexport const getDataTC = ()=> async (dispatch:Dispatch)=>{\r\n    try {\r\n        dispatch(setStatusAC('loading'))\r\n        let result = await Api.getData()\r\n        dispatch(getDataAC(result))\r\n        dispatch(setStatusAC('success'))\r\n\r\n    }catch (e) {\r\n        dispatch(setErrorAC(e))\r\n        dispatch(setStatusAC('error'))\r\n    }\r\n}\r\n\r\ntype TypeActions =\r\n    |ReturnType<typeof getDataAC>\r\n    |ReturnType<typeof setStatusAC>\r\n    |ReturnType<typeof setErrorAC>\r\ntype TypeStatus = 'free'|'loading'|'success'|'error'\r\nexport type TypeInitialState = {\r\n    status:TypeStatus\r\n    error:string\r\n    data:string[]\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {dataSelector} from \"./Bll/Selectors/selectors\";\nimport {getDataTC} from \"./Bll/reducer\";\nimport s from './App.module.css'\n\nfunction App() {\n    const dispatch = useDispatch()\n    const data = useSelector(dataSelector)\n    const [inputValue, setInputValue] = useState<string>('')\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [lowerCase, setLowerCase] = useState<boolean>(false)\n    const [substring, setSubstring] = useState<boolean>(false)\n\n    const filterOne = () => {\n        setLowerCase(true)\n    }\n    const filterTwo = () => {\n        setSubstring(true)\n    }\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setInputValue(event.currentTarget.value)\n        setLowerCase(false)\n        setSubstring(false)\n    }\n    useEffect(() => {\n        dispatch(getDataTC())\n    }, [dispatch])\n    return <>\n\n        <div className={s.container}>\n            <label htmlFor=\"Search\"><b>Search:</b></label>\n            <input className={s.superInput} type=\"text\" value={inputValue} onChange={changeInputValue}/>\n\n            <div>\n                <button className={s.btn} onClick={filterOne}>FilterOne</button>\n                <button className={s.btn} onClick={filterTwo}>FilterTwo</button>\n            </div>\n            <div>\n                <label htmlFor=\"Search\"><b>Ð¡apital letters:</b></label>\n                <input type={'checkbox'} onChange={() => setEditMode(!editMode)}/>\n            </div>\n        </div>\n\n\n        <div className={s.data}>\n\n            {lowerCase && data.filter((item) => item.length > +inputValue)\n                .map((item, index) => {\n                    return <div className={s.test} key={index}>{item}</div>\n                })}\n            {substring && data.filter((item) => editMode ?\n                item.toLowerCase().match(inputValue.toLowerCase()) :\n                item.match(inputValue)).map((item, index) => {\n                return <div className={s.test} key={index}>{item}</div>\n            })}\n        </div>\n    </>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore} from 'redux'\r\nimport {applyMiddleware} from 'redux'\r\nimport {combineReducers} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {Reducer} from \"./reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    reducer:Reducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}